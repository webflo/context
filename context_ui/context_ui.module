<?php
// $Id$

include_once(drupal_get_path("module", "context_ui") ."/context_ui_admin.inc");

/*
 * hook_block()
 */
function context_ui_block($op = 'list', $delta = 0) {
  $block = array();
  if ($op == 'list') {
    $block['devel']['info'] = t('Context Devel');
    return $block;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'devel':
        $block['subject'] = t('Context Devel');
        if ($context = context_get()) {
          $output = theme('context_devel', $context);
          $block['content'] = $output;
        }
        else {
          $block['content'] = "<p>". t('No context information is set.') ."</p>";
        }
        break;
    }
    return $block;
  }
}

/*
 * hook_context_define()
 */
function context_ui_context_define() {
  return array();
}

/*
 * hook_context_items()
 */
function context_ui_context_items() {
  $items = array();

  // Content Types
  $nodetypes = array();
  foreach (node_get_types() as $type) {
    $nodetypes[$type->type] = t($type->name);
  }  
  $items['node'] = array(
    'title' => t('Content Types'),
    'description' => t('Set this context when viewing a node page or using the add/edit form of one of these content types.'),
    'options' => $nodetypes,
  );
  
  // Views
  if (module_exists('views')) {
    $items['views'] = array(
      'title' => t('Views'),
      'description' => t('Set this context when displaying the page of one of these views.'),
      'options' => _context_ui_get_views(),
    );
  }
  
  // Menu
  if (module_exists('menu')) {    
    $menus = array();
    $root = menu_get_root_menus();
    unset($root[1]); // exclude core Drupal menu "Navigation" by default
    foreach ($root as $root_mid => $root_menu) {
      $tmp = menu_parent_options(0, $root_mid, 0);
      unset($tmp[key($tmp)]);
      $menus[$root_mid] = $root_menu;
      $menus = $menus + $tmp;
    }
    $items['menu'] = array(
      'title' => t('Menus'),
      'description' => t('Display the selected menu items as active when this context is set. <strong>Note:</strong> You must use <code>context_ui_menu_links()</code> instead of <code>primary_menu_links()</code> in your theme to make use of this feature.'),
      'options' => $menus,
      'widget' => 'select',
    );
  }
  
  return $items;
}

/*
 * hook_menu()
 */
function context_ui_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/build/context',
      'callback' => 'context_ui_admin',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'title' => t('Context'),
      'description' => t('Associate menus, views, blocks, etc. with different contexts to structure your site.')
    );
    $items[] = array(
      'path' => 'admin/build/context/list',
      'title' => t('List'),
      'callback' => 'context_ui_admin',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );
    $items[] = array(
      'path' => 'admin/build/context/add',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('context_ui_form', 'add'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
      'title' => t('Add Context'),
      'description' => t('Add a context to your site.'),
      'weight' => 1,
    );
    $items[] = array(
      'path' => 'admin/build/context/edit',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('context_ui_form', 'edit'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/build/context/view',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('context_ui_form', 'view'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/build/context/export',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('context_ui_export'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/build/context/delete',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('context_ui_delete_confirm'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_CALLBACK,
    );
    return $items;
  }
  else {
    // rebuild context_ui "cache"
    if ($_GET['q'] == 'admin/build/modules') {
      context_ui_rebuild();
    }

    // baby jesus cries
    init_theme();
    context_ui_block_hack();

    // include context ui css
    drupal_add_css(drupal_get_path("module", "context_ui") ."/context_ui.css");
  }
}

/*
 * hook_help()
 */
function context_ui_help($section) {
  switch ($section) {
    case 'admin/build/context':
      return "<p>".
        t('Contexts provide you with a way to organize your site using terms familiar to real human beings. You can create a set of sections like <b>"News"</b>, <b>"Projects"</b>, <b>"Staff"</b>, and associate different technical aspects of Drupal to each section. For example, the <b>"News"</b> section may be a collection of <b>Nodes</b>, <b>Views</b>, <b>Menus</b> and <b>Blocks</b>.')
        ."</p>";
      break;
  }
}

/*
 * hook_nodeapi()
 */
function context_ui_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view' && $page) {
    context_ui_set('node', $node->type);
  }
}

/*
 * hook_form_alter()
 */
function context_ui_form_alter($form_id, &$form) {
  if ($form['#node']) {
    context_ui_set('node', $form['#node']->type);
  }
  else if ($form_id == 'comment_form' && $nid = $form['nid']['#value']) {
    $node = node_load($nid);
    context_ui_set('node', $node->type);
  }
}

/*
 * hook_views_pre_query()
 */
function context_ui_views_pre_query($view) {
  if ($view->build_type == 'page') {
    context_ui_set('views', $view->name);
  }
}

/*
 * Sets a space-key-value context that has been associated with the provided item.
 *
 * @param $type
 *   The item type to be matched. Any of the currently supported context items types ("view",
 *   "node", etc.) can be specified.
 * @param $id
 *   The string or integer id of the context item.
 *
 * @return
 *   True if one or more contexts were set. False if no items/contexts matched.
 */
function context_ui_set($type, $id) {
  $set = false;
  $result = db_query("
    SELECT c.space, c.key, c.value FROM {context_ui_item} ci
    JOIN {context_ui} c ON ci.cid = c.cid
    WHERE ci.type = '%s' AND ci.id = '%s' AND c.status = %d",
    $type, $id, 1);
  if (db_num_rows($result) > 0) {
    while ($context = db_fetch_object($result)) {      
      context_set($context->space, $context->key, $context->value);
    }
    $set = true;
  }
  return $set;
}

/*
 * Takes a retrieved context array and returns a themed out tree representation of that context.
 */
function theme_context_devel($context) {
  $output = '';
  foreach ($context as $space => $a) {
    $output .= "<div class='context-devel-space'>$space</div>";
    $output .= "<div class='context-devel-tree'>". theme_context_devel_recurse($a) ."</div>";
  }
  return $output;
}

/*
 * Helper function to theme_context_devel that recurses down context arrays and themes accordingly.
 */
function theme_context_devel_recurse($value) {
  if (is_array($value) || is_object($value)) {
    if (is_array($value)) {
      $type = 'array';
    }
    else if (is_object($value)) {
      $type = 'object';
    }
    foreach ((array)$value as $key => $a) {
      $output .= "<div class='context-devel-wrapper'><label><small>$type</small>$key</label>". theme('context_devel_recurse', $a) ."</div>";
    }
  }
  else {
    if (is_string($value)) {
      $type = 'string';
    }
    else if (is_int($value)) {
      $type = 'int';
    }
    else if (is_bool($value)) {
      $type = 'bool';
    }
    $output .= "<div class='context-devel-wrapper'><label><small>$type</small>$value</label></div>";
  }
  return $output;
}

/**
 * Retrieves a mid => context info array and static caches it.
 */
function context_ui_menu_get() {
  static $menu_contexts;
  if (!isset($menu_contexts)) {
    $menu_contexts = array();
    $menu_context = db_query(
      "SELECT ci.id AS mid, c.space AS space, c.key AS `key`, c.value as value
      FROM {context_ui_item} ci
      JOIN {context_ui} c ON c.cid = ci.cid
      WHERE ci.type = '%s' AND c.status = %d",
      'menu', 1);
    while ($m = db_fetch_object($menu_context)) {
      $menu_contexts[$m->mid] = $m;
    }
  }
  return $menu_contexts;
}

/*
 * Takes a menu context object (just a row from db) and checks for specified context.
 */
function context_ui_menu_check($mid_context) {
  if (!empty($mid_context->value)) {
    return context_get($mid_context->space, $mid_context->key) == $mid_context->value;
  }
  else {
    return context_exists($mid_context->space, $mid_context->key);
  }
}

/*
 * Alternate implementation of _menu_get_active_trail_in_submenu(). Uses context in addition to a path check.
 */
function _context_ui_menu_get_active_trail_in_submenu($pid) {
  static $trails;

  if (!isset($trails)) {
    // Find all menu items which point to the current node and for each
    // follow the parents up the chain to build an active trail.
    $trails = array();
    $menu = menu_get_menu();
    $menu_contexts = context_ui_menu_get();
    $path = $_GET['q'];
    $count = 0;
    while (!$count) {
      foreach ($menu['items'] as $mid => $item) {
        if (
          isset($item['path']) && ($item['path'] == $path ||
          ($item['path'] == '<front>' && drupal_is_front_page())) ||
          ($menu_context = $menu_contexts[$mid] && context_ui_menu_check($menu_contexts[$mid]))
          ) {
          $trails[$count] = array();
          while ($mid && $menu['items'][$mid]) {
            array_unshift($trails[$count], $mid);
            $mid = $menu['items'][$mid]['pid'];
          }
          $count ++;
        }
      }
      $path = substr($path, 0, strrpos($path, '/'));
    }
  }

  if ($trails) {
    foreach ($trails as $trail) {
      $count_trail = count($trail);
      for ($i = 0; $i < $count_trail; $i++) {
        if ($trail[$i] == $pid) {
          // Return a trail from $pid down to the current page inclusive.
          for ( ; $i < $count_trail; $i++) {
            $subtrail[] = $trail[$i];
          }
          return $subtrail;
        }
      }
    }
  }

  return NULL;
}

/*
 * Alternate implementation of primary_menu_links(). Uses context.
 */
function context_ui_menu_links($start_level = 1, $pid = 0) {
  if (!module_exists('menu')) {
    return NULL;
  }
  if (!$pid) {
    $pid = variable_get('menu_primary_menu', 0);
  }
  if (!$pid) {
    return NULL;
  }

  $start_level = ($start_level < 1) ? 1 : $start_level;

  if ($start_level > 1) {
    $trail = _context_ui_menu_get_active_trail_in_submenu($pid);
    if (!$trail) {
      return NULL;
    }
    else {
      $pid = $trail[$start_level - 1];
    }
  }

  $menu_contexts = context_ui_menu_get();
  $menu = menu_get_menu();
  $links = array();
  if (is_array($menu['visible'][$pid]) && isset($menu['visible'][$pid]['children'])) {
    $count = 1;
    foreach ($menu['visible'][$pid]['children'] as $cid) {
      $index = "menu-$start_level-$count-$pid";
      $link = menu_item_link($cid, FALSE);
      if ($menu_context = $menu_contexts[$cid]) {
        $active = context_ui_menu_check($menu_context);
        $link['warp'] = $menu_context->warp;
      }
      if (menu_in_active_trail_in_submenu($cid, $pid)) {
        $active = true;
      }
      if ($active == true) {
        $index .= ' active';
        $link['attributes']['class'] .= ' active';
      }
      $links[$index] = $link;
      $count++;
      $active = false;
    }
  }

  // Special case - provide link to admin/build/menu if primary links is empty.
  if (empty($links) && $start_level == 1 && $pid == variable_get('menu_primary_menu', 0) && user_access('administer menu')) {
    $links['1-1'] = array(
      'title' => t('Edit primary links'),
      'href' => 'admin/build/menu'
    );
  }

  return $links;
}

/*
 * Alternate implementation of menu_secondary_links(). Uses context.
 */
function context_ui_menu_secondary_links() {
  $msm = variable_get('menu_secondary_menu', 0);
  if ($msm == 0) {
    return NULL;
  }

  if ($msm == variable_get('menu_primary_menu', 0)) {
    return context_ui_menu_links(2, $msm);
  }

  return context_ui_menu_links(1, $msm);
}

/*
 * An egregious hack. Checks the function namespace for a theme and theme engine override of theme_blocks
 * and attempts to take the first available override. If all else fails, falls back to a custom
 * context_ui theme function namespace that requires custom implementation by the themer.
 */
function context_ui_block_hack() {
  global $theme, $theme_engine;
  if (!function_exists($theme .'_blocks')) {
    $f_name = $theme .'_blocks';
  }
  else if (!function_exists($theme_engine .'_blocks')) {
    $f_name = $theme_engine .'_blocks';
  }
  else {
    $f_name = 'theme_context_ui_blocks';
  }
  $f_name = str_replace('-', '_', $f_name);
  $eval = '
  function '. $f_name .'($region) {
    $output = "";
    if ($list = context_ui_block_list($region)) {
      foreach ($list as $key => $block) {
        $output .= theme("block", $block);
      }
    }
    // Add any content assigned to this region through drupal_set_content() calls.
    $output .= drupal_get_content($region);
    return $output;
  }';
  eval($eval);
}

/*
 * An alternative version of block_list() that provides any context_ui enabled blocks.
 */
function context_ui_block_list($region) {
  global $user, $theme_key;

  static $blocks, $cids;

  $defaults = array();

  if (!count($blocks)) {
    $blocks = array();
    $cids = array();

    // generate list of active DB contexts
    // formerly an API function -- TODO: evaluate whether this may be useful otherwise
    $result = db_query("SELECT * FROM {context_ui} WHERE status = 1", 'context_ui');
    while ($context = db_fetch_object($result)) {
      if (context_get($context->space, $context->key) == $context->value) {
        $cids[$context->cid] = $context->cid;
      }
    }

    $rids = array_keys($user->roles);
    $placeholders = implode(',', array_fill(0, count($rids), '%d'));
    $result = db_query("
      SELECT DISTINCT b.*, c.weight AS context_weight, c.region AS context_region, c.cid
      FROM {blocks} b
      LEFT JOIN {blocks_roles} r ON b.module = r.module AND b.delta = r.delta
      LEFT JOIN {context_ui_block} c ON b.module = c.module AND b.delta = c.delta
      WHERE b.theme = '%s' AND (r.rid IN ($placeholders) OR r.rid IS NULL)
      ORDER BY b.region, b.weight, b.module",
      array_merge(array($theme_key), $rids)
    );
    while ($block = db_fetch_object($result)) {
      // we determine status as a combination of DB setting + context definition
      $status = FALSE;
      // prepare context blocks
      // if cid is in active contexts, use context weight + region
      if (isset($block->cid) && in_array($block->cid, $cids)) {
        $block->context_ui = TRUE;
        $block->region = $block->context_region ? $block->context_region : $block->region;
        $block->weight = $block->context_weight ? $block->context_weight : $block->weight;
        $status = TRUE;
      }
      // use db setting
      else {
        $status = $block->status;
      }

      if ($status) {
        if (!isset($blocks[$block->region])) {
          $blocks[$block->region] = array();
        }
        // Use the user's block visibility setting, if necessary
        if ($block->custom != 0) {
          if ($user->uid && isset($user->block[$block->module][$block->delta])) {
            $enabled = $user->block[$block->module][$block->delta];
          }
          else {
            $enabled = ($block->custom == 1);
          }
        }
        else {
          $enabled = TRUE;
        }

        // Match path if necessary
        if ($block->pages) {
          if ($block->visibility < 2) {
            $path = drupal_get_path_alias($_GET['q']);
            $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($block->pages, '/')) .')$/';
            // Compare with the internal and path alias (if any).
            $page_match = preg_match($regexp, $path);
            if ($path != $_GET['q']) {
              $page_match = $page_match || preg_match($regexp, $_GET['q']);
            }
            // When $block->visibility has a value of 0, the block is displayed on
            // all pages except those listed in $block->pages. When set to 1, it
            // is displayed only on those pages listed in $block->pages.
            $page_match = !($block->visibility xor $page_match);
          }
          else {
            $page_match = drupal_eval($block->pages);
          }
        }
        else {
          $page_match = TRUE;
        }
  
        if ($enabled && $page_match) {
          // Check the current throttle status and see if block should be displayed
          // based on server load.
          if (!($block->throttle && (module_invoke('throttle', 'status') > 0))) {
            $array = module_invoke($block->module, 'block', 'view', $block->delta);
            if (isset($array) && is_array($array)) {
              foreach ($array as $k => $v) {
                $block->$k = $v;
              }
            }
          }
          if (isset($block->content) && $block->content) {
            // Override default block title if a custom display title is present.
            if ($block->title) {
              // Check plain here to allow module generated titles to keep any markup.
              $block->subject = $block->title == '<none>' ? '' : check_plain($block->title);
            }
            $blocks[$block->region]["{$block->module}_{$block->delta}"] = $block;
          }
        }

      }
    }
    // Custom sort since SQL order by won't give it to us for free
    foreach ($blocks as &$region_blocks) {
      uasort($region_blocks, '_context_ui_block_compare');
    }
  }
  // Create an empty array if there were no entries
  if (!isset($blocks[$region])) {
    $blocks[$region] = array();
  }
  return $blocks[$region];
}
